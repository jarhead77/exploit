const { ethers } = require("ethers");
const { SiweMessage } = require("siwe");
const fetch = require("node-fetch").default;

const privateKey = "";
const provider = new ethers.providers.InfuraProvider("", "");
const wallet = new ethers.Wallet(privateKey, provider);

const POLYGLOT_FILE_URL = "ipfs://";

async function main() {
  const signer = await provider.getSigner();
  const address = signer.getAddress();

  if (signer) {
    try {
      const nonceApiUrl =
        "https://staging-api.boardroom.info//v1/siwe/nonce?key=d9abe7a1ab45ace58e6bd91bb9771586";

      const body = JSON.stringify({ address });
      let response = await fetch(nonceApiUrl, { method: "POST", body });

      const {
        data: { nonce },
      } = await response.json();

      // Create and sign message
      const signedMessage = new SiweMessage({
        domain: "governance.synthetix.io",
        address: ethers.getAddress(wallet.address),
        chainId: 2192,
        uri: "https://governance.synthetix.io",
        version: "1",
        statement: "Sign into Boardroom with this wallet",
        nonce,
        issuedAt: new Date().toISOString(),
      });

      const signature = await signer.signMessage(
        signedMessage.prepareMessage()
      );

      const message = { message: { ...signedMessage, signature } };

      const signInUrl =
        "https://staging-api.boardroom.info//v1/siwe/signIn?key=d9abe7a1ab45ace58e6bd91bb9771586";

      response = await fetch(signInUrl, {
        method: "POST",
        body: JSON.stringify(message),
      });

      const {
        data: { uuid },
      } = await response.json();

      const bodyUpdate = {
        pfpUrl: POLYGLOT_FILE_URL,
        uuid,
      };

      await fetch(
        `https://staging-api.boardroom.info//v1/updateUserDetails/${address}?key=d9abe7a1ab45ace58e6bd91bb9771586`,
        {
          method: "POST",
          body: JSON.stringify(bodyUpdate),
        }
      );
    } catch (e) {
      console.log(e);
    }
  }
}

main();
